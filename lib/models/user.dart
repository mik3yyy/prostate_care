import 'dart:convert';

import 'package:hive/hive.dart';

part 'user.g.dart'; // This file is generated by the Hive generator

@HiveType(typeId: 0) // The typeId must be unique for each type of Hive object
class User extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String email;

  @HiveField(2)
  final String fullName;

  @HiveField(3)
  final String? reference; // Optional field

  @HiveField(4)
  final String password;

  @HiveField(5)
  final String? image; // Optional field

  User({
    required this.id,
    required this.email,
    required this.fullName,
    this.reference,
    required this.password,
    this.image,
  });

  // Convert a User object into a Map. Useful for encoding to JSON or storing in Hive.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'email': email,
      'fullName': fullName,
      'reference': reference,
      'password': password,
      'image': image,
    };
  }

  // Convert a Map into a User object. Useful for decoding from JSON or reading from Hive.
  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      id: map['id'],
      email: map['email'],
      fullName: map['fullName'],
      reference: map['reference'],
      password: map['password'],
      image: map['image'],
    );
  }

  // Convert a User object into a JSON string. Useful for network transmission.
  String toJson() => json.encode(toMap());

  // Convert a JSON string into a User object. Useful for network reception.
  factory User.fromJson(String source) => User.fromMap(json.decode(source));
}
